@page "/cars"
@using CarSaleSystem.Services
@using CarSaleSystem.Models
@inject CarSaleService CarService
@inject DialogService DialogService

<PageTitle>ËΩ¶ËæÜÁÆ°ÁêÜ</PageTitle>

<RadzenStack Gap="1rem">
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1">üöó ËΩ¶ËæÜÁÆ°ÁêÜ</RadzenText>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Êñ∞Â¢ûËΩ¶ËæÜ" Click="@OpenAddDialog" />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenDataGrid @ref="carsGrid" Data="@cars" TItem="Car" AllowSorting="true" AllowFiltering="true" 
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10">
                    <Columns>
                        <RadzenDataGridColumn TItem="Car" Property="Id" Title="ÁºñÂè∑" Width="80px" />
                        <RadzenDataGridColumn TItem="Car" Property="Type" Title="ÂûãÂè∑" Width="200px" />
                        <RadzenDataGridColumn TItem="Car" Property="Series.SeriesName" Title="ËΩ¶Á≥ª" Width="150px" />
                        <RadzenDataGridColumn TItem="Car" Property="Series.Brand.BrandName" Title="ÂìÅÁâå" Width="150px" />
                        <RadzenDataGridColumn TItem="Car" Property="Color" Title="È¢úËâ≤" Width="100px" />
                        <RadzenDataGridColumn TItem="Car" Property="Price" Title="ÊåáÂØº‰ª∑" Width="120px">
                            <Template Context="car">
                                @car.Price.ToString("C")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Car" Property="SalePrice" Title="ÈîÄÂîÆ‰ª∑" Width="120px">
                             <Template Context="car">
                                @car.SalePrice.ToString("C")
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Car" Property="Repertory" Title="Â∫ìÂ≠ò" Width="80px" />
                        <RadzenDataGridColumn TItem="Car" Property="Status" Title="Áä∂ÊÄÅ" Width="100px" TextAlign="TextAlign.Center">
                            <Template Context="car">
                                <RadzenBadge BadgeStyle="@(car.Status == "1" ? BadgeStyle.Success : BadgeStyle.Light)" 
                                             Text="@(car.Status == "1" ? "Âú®ÂîÆ" : "‰∏ãÊû∂")" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Car" Title="Êìç‰Ωú" Width="150px" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                            <Template Context="car">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.Center">
                                    <RadzenButton ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Icon="edit" 
                                                  Click="@(() => OpenEditDialog(car))" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Icon="delete" 
                                                  Click="@(() => DeleteCar(car.Id))" />
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    private RadzenDataGrid<Car> carsGrid;
    private IQueryable<Car> cars;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        cars = await CarService.GetCarsAsync();
    }

    private async Task OpenAddDialog()
    {
        var result = await DialogService.OpenAsync<CarDialog>("Êñ∞Â¢ûËΩ¶ËæÜ", new Dictionary<string, object>
        {
            { "Car", new Car() }
        });

        if (result == true)
        {
            await LoadCars();
            await carsGrid.Reload();
        }
    }

    private async Task OpenEditDialog(Car car)
    {
        var carToEdit = new Car // Create a copy for editing
        {
            Id = car.Id,
            SeriesId = car.SeriesId,
            Type = car.Type,
            Color = car.Color,
            Price = car.Price,
            SalePrice = car.SalePrice,
            Repertory = car.Repertory,
            Status = car.Status,
            CreateTime = car.CreateTime
        };
        
        var result = await DialogService.OpenAsync<CarDialog>("ÁºñËæëËΩ¶ËæÜ", new Dictionary<string, object>
        {
            { "Car", carToEdit }
        });

        if (result == true)
        {
            await LoadCars();
            await carsGrid.Reload();
        }
    }

    private async Task DeleteCar(long carId)
    {
        var confirm = await DialogService.Confirm("Á°ÆÂÆöË¶ÅÂà†Èô§ËøôËæÜËΩ¶Âêó (‰∏ãÊû∂) Ôºü", "Á°ÆËÆ§Âà†Èô§", new ConfirmOptions
        {
            OkButtonText = "Á°ÆÂÆö",
            CancelButtonText = "ÂèñÊ∂à"
        });

        if (confirm == true)
        {
            await CarService.DeleteCarAsync(carId);
            await LoadCars();
            await carsGrid.Reload();
        }
    }
}