@page "/carshops"
@using CarSaleSystem.Services
@using CarSaleSystem.Models
@inject CarSaleService CarService
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Èó®Â∫óÁÆ°ÁêÜ</PageTitle>

<RadzenStack Gap="1rem">
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H1">üè™ Èó®Â∫óÁÆ°ÁêÜ</RadzenText>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Text="Êñ∞Â¢ûÈó®Â∫ó" Click="@OpenAddDialog" />
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenCard>
                <RadzenDataGrid @ref="carShopsGrid" Data="@carShops" TItem="CarShop" AllowSorting="true" AllowFiltering="true" 
                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10">
                    <Columns>
                        <RadzenDataGridColumn TItem="CarShop" Property="Id" Title="ÁºñÂè∑" Width="80px" />
                        <RadzenDataGridColumn TItem="CarShop" Property="Name" Title="Èó®Â∫óÂêçÁß∞" Width="200px" />
                        <RadzenDataGridColumn TItem="CarShop" Property="Brand" Title="ÁªèËê•ÂìÅÁâå" Width="150px" />
                        <RadzenDataGridColumn TItem="CarShop" Property="Address" Title="Âú∞ÂùÄ" />
                        <RadzenDataGridColumn TItem="CarShop" Property="Phone" Title="ÁîµËØù" Width="150px" />
                        <RadzenDataGridColumn TItem="CarShop" Property="BusinessHours" Title="Ëê•‰∏öÊó∂Èó¥" Width="180px" />
                        <RadzenDataGridColumn TItem="CarShop" Title="Êìç‰Ωú" Width="150px" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                            <Template Context="shop">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.Center">
                                    <RadzenButton ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Icon="edit" 
                                                  Click="@(() => OpenEditDialog(shop))" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Icon="delete" 
                                                  Click="@(() => DeleteCarShop(shop.Id))" />
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    private RadzenDataGrid<CarShop> carShopsGrid;
    private IQueryable<CarShop> carShops;

    protected override async Task OnInitializedAsync()
    {
        await LoadCarShops();
    }

    private async Task LoadCarShops()
    {
        carShops = await CarService.GetCarShopsAsync();
    }

    private async Task OpenAddDialog()
    {
        var result = await DialogService.OpenAsync<CarShopDialog>("Êñ∞Â¢ûÈó®Â∫ó", 
            new Dictionary<string, object> { { "CarShop", new CarShop() } },
            new DialogOptions() { Width = "600px" });

        if (result is CarShop newShop)
        {
            await CarService.CreateCarShopAsync(newShop);
            await LoadCarShops();
            await carShopsGrid.Reload();
        }
    }

    private async Task OpenEditDialog(CarShop shop)
    {
        var shopToEdit = new CarShop
        {
            Id = shop.Id,
            Name = shop.Name,
            Address = shop.Address,
            Phone = shop.Phone,
            BusinessHours = shop.BusinessHours,
            Latitude = shop.Latitude,
            Longitude = shop.Longitude,
            Brand = shop.Brand,
            CreatedTime = shop.CreatedTime
        };

        var result = await DialogService.OpenAsync<CarShopDialog>("ÁºñËæëÈó®Â∫ó", 
            new Dictionary<string, object> { { "CarShop", shopToEdit } },
            new DialogOptions() { Width = "600px" });

        if (result is CarShop updatedShop)
        {
            await CarService.UpdateCarShopAsync(updatedShop);
            await LoadCarShops();
            await carShopsGrid.Reload();
        }
    }

    private async Task DeleteCarShop(int shopId)
    {
        var confirm = await DialogService.Confirm("Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÂÆ∂Èó®Â∫óÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄ„ÄÇ", "Á°ÆËÆ§Âà†Èô§", new ConfirmOptions
        {
            OkButtonText = "Á°ÆÂÆö",
            CancelButtonText = "ÂèñÊ∂à"
        });

        if (confirm == true)
        {
            await CarService.DeleteCarShopAsync(shopId);
            await LoadCarShops();
            await carShopsGrid.Reload();
        }
    }
}